version: 2
jobs:
  build:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
        environment:
          CARGO_HOME: /home/circleci/.cargo
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Reduce codegen Units
          # If we don't include this, the linker runs out of memory when building
          # the project on CI. We don't include this normally though because
          # it should be able to build with more units on other machines
          command: printf "[profile.dev]\ncodegen-units = 1\n" >> Cargo.toml
      - run:
          name: Build
          command: cargo build --all-features --all-targets
      - run:
          name: Test
          # Note the timeout is included to make sure that they
          # do not run for more than 10 minutes under any circumstances
          # (We have had issues with bugs causing the tests to "run"
          # for 5 hours, wasting a ton of compute credits)
          command: timeout 10m cargo test --all --all-features
          environment:
            - RUST_LOG: "interledger=trace"
            - RUST_BACKTRACE: "full"
      - run:
          name: Check Style
          command: |
            cargo fmt --all -- --check
            cargo clippy --all-targets --all-features -- -D warnings
      - run:
          name: Audit Dependencies
          command: cargo audit
  update-docker-images:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
    resource_class: medium+
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          # builds release profile images to be released
          name: Build Docker Images
          command: |
            export DOCKER_IMAGE_TAG=$(./.circleci/release/get_docker_image_tag.sh interledger-settlement-engines ${CIRCLE_TAG})
            docker/docker-build.sh settlement-engines
          environment:
            PROFILE: "release"
      - run:
          name: Push to DockerHub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

            DOCKER_IMAGE_TAG=$(./.circleci/release/get_docker_image_tag.sh interledger-settlement-engines ${CIRCLE_TAG})
            echo "Pushing docker image of tag: interledgerrs/settlement-engines:${DOCKER_IMAGE_TAG}"
            docker push interledgerrs/settlement-engines:${DOCKER_IMAGE_TAG}
  build-release-binary-linux:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
    resource_class: medium+
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          # Builds release profile binaries
          # The artifact is stored in release-builds directory, which is persistent
          name: Build binary
          command: |
            crate_name=$(./.circleci/release/get_crate_name.sh ${CIRCLE_TAG})
            printf "Building crate_name: %s, tag: %s\n" "${crate_name}" "${CIRCLE_TAG}"
            ./.circleci/release/build.sh x86_64-unknown-linux-musl ${crate_name}
            mkdir -p /tmp/release-builds/x86_64-unknown-linux-musl
            cp target/x86_64-unknown-linux-musl/release/${crate_name} /tmp/release-builds/x86_64-unknown-linux-musl/${crate_name}
      - persist_to_workspace:
          root: /tmp/release-builds
          paths:
            - x86_64-unknown-linux-musl/*
      - store_artifacts:
          path: /tmp/release-builds/x86_64-unknown-linux-musl
          destination: release-builds/x86_64-unknown-linux-musl
  build-release-binary-darwin:
    macos:
      xcode: "10.2.0"
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.38.0
      - run:
          # Builds release profile binaries
          # The artifact is stored in release-builds directory, which is persistent
          name: Build binary
          command: |
            crate_name=$(./.circleci/release/get_crate_name.sh ${CIRCLE_TAG})
            printf "Building crate_name: %s, tag: %s\n" "${crate_name}" "${CIRCLE_TAG}"
            ./.circleci/release/build.sh x86_64-apple-darwin ${crate_name}
            mkdir -p /tmp/release-builds/x86_64-apple-darwin
            cp target/x86_64-apple-darwin/release/${crate_name} /tmp/release-builds/x86_64-apple-darwin/${crate_name}
      - persist_to_workspace:
          root: /tmp/release-builds
          paths:
            - x86_64-apple-darwin/*
      - store_artifacts:
          path: /tmp/release-builds/x86_64-apple-darwin
          destination: release-builds/x86_64-apple-darwin
  release-binaries:
    docker:
      - image: interledgerrs/circleci-rust-dind:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/release-builds
      - checkout
      - run:
          name: Release Binaries
          command: |
            mkdir -p logs
            crate_name=$(./.circleci/release/get_crate_name.sh ${CIRCLE_TAG})

            # linux musl
            base_dir=/tmp/release-builds/x86_64-unknown-linux-musl
            pushd ${base_dir}
            musl_zip="${base_dir}/${crate_name}-x86_64-unknown-linux-musl.zip"
            musl_tar_gz="${base_dir}/${crate_name}-x86_64-unknown-linux-musl.tar.gz"
            zip $(basename ${musl_zip}) ${crate_name}
            tar -zcvf $(basename ${musl_tar_gz}) ${crate_name}
            popd

            # macOS
            base_dir=/tmp/release-builds/x86_64-apple-darwin
            pushd ${base_dir}
            darwin_zip="${base_dir}/${crate_name}-x86_64-apple-darwin.zip"
            darwin_tar_gz="${base_dir}/${crate_name}-x86_64-apple-darwin.tar.gz"
            zip $(basename ${darwin_zip}) ${crate_name}
            tar -zcvf $(basename ${darwin_tar_gz}) ${crate_name}
            popd

            # Auto-generate a release note
            release_note=logs/release_note.txt
            conventional-changelog -p angular > ${release_note}

            ./.circleci/release/github_release.sh \
              ${CIRCLE_TAG} \
              ${CIRCLE_TAG} \
              ${release_note} \
              ${musl_zip} \
              ${musl_tar_gz} \
              ${darwin_zip} \
              ${darwin_tar_gz}
      - store_artifacts:
          path: logs
          destination: release-binaries-logs

workflows:
  version: 2
  test-and-release:
    jobs:
      - build:
          filters:
            tags:
              only: # we need this to kick builds when tags are given
                - /.*/
      - update-docker-images: # updates docker images on DockerHub, only if the branch is master or something is tagged
          filters:
            branches:
              only: # master branch will be tagged as `latest` image
                - master
            tags:
              only: # whatever tagged binary crates
                - /^(interledger-settlement-engines-|v).*$/
          requires:
            - build
      - build-release-binary-linux:
          filters:
            branches:
              ignore: # no branch pushes are built
                - /.*/
            tags:
              only: # whatever tagged binary crates
                - /^(interledger-settlement-engines-|v).*$/
          requires:
            - build
      - build-release-binary-darwin:
          filters:
            branches:
              ignore: # no branch pushes are built
                - /.*/
            tags:
              only: # whatever tagged binary crates
                - /^(interledger-settlement-engines-|v).*$/
          requires:
            - build
      - release-binaries:
          filters:
            branches:
              ignore: # no branch pushes are built
                - /.*/
            tags:
              only: # whatever tagged binary crates
                - /^(interledger-settlement-engines-|v).*$/
          requires:
            - build-release-binary-linux
            - build-release-binary-darwin
